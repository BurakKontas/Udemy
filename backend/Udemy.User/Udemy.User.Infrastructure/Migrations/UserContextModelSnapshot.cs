// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Udemy.User.Infrastructure.Context;

#nullable disable

namespace Udemy.User.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class UserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Udemy.Common.Primitives.DomainEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmailVerificationVerificationId")
                        .HasColumnType("text");

                    b.Property<string>("PasswordChangeVerificationVerificationId")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmailVerificationVerificationId");

                    b.HasIndex("PasswordChangeVerificationVerificationId");

                    b.HasIndex("UserId");

                    b.ToTable("DomainEvent");
                });

            modelBuilder.Entity("Udemy.User.Domain.Entities.User.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Udemy.User.Domain.Entities.Verification.EmailVerification", b =>
                {
                    b.Property<string>("VerificationId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailOneTimeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmailVerificationCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.HasKey("VerificationId");

                    b.HasIndex("Email");

                    b.ToTable("EmailVerifications");
                });

            modelBuilder.Entity("Udemy.User.Domain.Entities.Verification.PasswordChangeVerification", b =>
                {
                    b.Property<string>("VerificationId")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordChangeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("VerificationId");

                    b.HasIndex("Email");

                    b.ToTable("PasswordChangeVerifications");
                });

            modelBuilder.Entity("Udemy.Common.Primitives.DomainEvent", b =>
                {
                    b.HasOne("Udemy.User.Domain.Entities.Verification.EmailVerification", null)
                        .WithMany("DomainEvents")
                        .HasForeignKey("EmailVerificationVerificationId");

                    b.HasOne("Udemy.User.Domain.Entities.Verification.PasswordChangeVerification", null)
                        .WithMany("DomainEvents")
                        .HasForeignKey("PasswordChangeVerificationVerificationId");

                    b.HasOne("Udemy.User.Domain.Entities.User.User", null)
                        .WithMany("DomainEvents")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Udemy.User.Domain.Entities.User.User", b =>
                {
                    b.OwnsMany("Udemy.User.Domain.Entities.User.ValueObjects.IdentityProvider", "IdentityProviders", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Provider")
                                .HasColumnType("integer");

                            b1.Property<string>("ProviderId")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("IdentityProvider");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("Udemy.User.Domain.Entities.User.ValueObjects.SocialMedia", "SocialMedias", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("integer");

                            NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b1.Property<int>("Id"));

                            b1.Property<int>("Media")
                                .HasColumnType("integer");

                            b1.Property<string>("Uri")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("SocialMedia");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("IdentityProviders");

                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("Udemy.User.Domain.Entities.User.User", b =>
                {
                    b.Navigation("DomainEvents");
                });

            modelBuilder.Entity("Udemy.User.Domain.Entities.Verification.EmailVerification", b =>
                {
                    b.Navigation("DomainEvents");
                });

            modelBuilder.Entity("Udemy.User.Domain.Entities.Verification.PasswordChangeVerification", b =>
                {
                    b.Navigation("DomainEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
